"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const panel = require("./panel-BHyzHF3z.cjs");
const pluginUi_jsxRuntime = require("./jsx-runtime-CkcAJzSx.cjs");
const falsyToString = (value) => typeof value === "boolean" ? `${value}` : value === 0 ? "0" : value;
const cx = panel.clsx;
const cva = (base, config) => (props) => {
  var _config_compoundVariants;
  if ((config === null || config === void 0 ? void 0 : config.variants) == null) return cx(base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);
  const { variants, defaultVariants } = config;
  const getVariantClassNames = Object.keys(variants).map((variant) => {
    const variantProp = props === null || props === void 0 ? void 0 : props[variant];
    const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];
    if (variantProp === null) return null;
    const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);
    return variants[variant][variantKey];
  });
  const propsWithoutUndefined = props && Object.entries(props).reduce((acc, param) => {
    let [key, value] = param;
    if (value === void 0) {
      return acc;
    }
    acc[key] = value;
    return acc;
  }, {});
  const getCompoundVariantClassNames = config === null || config === void 0 ? void 0 : (_config_compoundVariants = config.compoundVariants) === null || _config_compoundVariants === void 0 ? void 0 : _config_compoundVariants.reduce((acc, param) => {
    let { class: cvClass, className: cvClassName, ...compoundVariantOptions } = param;
    return Object.entries(compoundVariantOptions).every((param2) => {
      let [key, value] = param2;
      return Array.isArray(value) ? value.includes({
        ...defaultVariants,
        ...propsWithoutUndefined
      }[key]) : {
        ...defaultVariants,
        ...propsWithoutUndefined
      }[key] === value;
    }) ? [
      ...acc,
      cvClass,
      cvClassName
    ] : acc;
  }, []);
  return cx(base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);
};
const badgeVariants = cva("rounded-md p-2", {
  variants: {
    color: {
      blue: "",
      green: "",
      red: "",
      yellow: "",
      purple: "",
      orange: "",
      pink: ""
    },
    style: {
      default: "text-white",
      outline: "border text-zinc-950"
    }
  },
  compoundVariants: [
    {
      style: "default",
      color: "blue",
      className: "bg-blue-500"
    },
    {
      style: "default",
      color: "green",
      className: "bg-green-500"
    },
    {
      style: "default",
      color: "red",
      className: "bg-red-500"
    },
    {
      style: "default",
      color: "yellow",
      className: "bg-yellow-500"
    },
    {
      style: "default",
      color: "purple",
      className: "bg-purple-500"
    },
    {
      style: "default",
      color: "orange",
      className: "bg-orange-500"
    },
    {
      style: "default",
      color: "pink",
      className: "bg-pink-500"
    },
    {
      style: "outline",
      color: "blue",
      className: "border-blue-500"
    },
    {
      style: "outline",
      color: "green",
      className: "border-green-500"
    },
    {
      style: "outline",
      color: "red",
      className: "border-red-500"
    },
    {
      style: "outline",
      color: "yellow",
      className: "border-yellow-500"
    },
    {
      style: "outline",
      color: "purple",
      className: "border-purple-500"
    },
    {
      style: "outline",
      color: "orange",
      className: "border-orange-500"
    },
    {
      style: "outline",
      color: "pink",
      className: "border-pink-500"
    }
  ],
  defaultVariants: {
    color: "blue",
    style: "default"
  }
});
function Badge({ children, color, style, className }) {
  return /* @__PURE__ */ pluginUi_jsxRuntime.u("span", { className: panel.cn(badgeVariants({ color, style }), className), children });
}
function Button({
  children,
  style = "primary",
  size = "md",
  onClick,
  asChild,
  disabled,
  ...props
}) {
  if (asChild) {
    return /* @__PURE__ */ pluginUi_jsxRuntime.u(
      "button",
      {
        ...props,
        onClick,
        disabled,
        className: "cursor-pointer",
        children
      }
    );
  }
  return /* @__PURE__ */ pluginUi_jsxRuntime.u(
    "button",
    {
      ...props,
      onClick,
      className: panel.cn(
        "flex h-12 cursor-pointer items-center justify-center rounded-lg px-4 py-2 font-medium text-sm text-white",
        size === "sm" && "h-8",
        size === "md" && "h-12",
        size === "lg" && "h-16",
        style === "primary" && "bg-blue-600",
        style === "secondary" && "bg-zinc-500/40",
        style === "outline" && "border border-zinc-500 bg-white text-blue-500",
        style === "ghost" && "bg-transparent text-blue-500"
      ),
      type: "submit",
      disabled,
      children
    }
  );
}
const useToolbar = () => {
  const plugins = panel.usePlugins();
  return plugins.toolbarContext;
};
exports.Panel = panel.Panel;
exports.useCallback = panel.q;
exports.useEffect = panel.y;
exports.useMemo = panel.T;
exports.useRef = panel.A;
exports.useState = panel.d;
exports.Component = pluginUi_jsxRuntime.x;
exports.Fragment = pluginUi_jsxRuntime.k;
exports.cloneElement = pluginUi_jsxRuntime.J;
exports.createContext = pluginUi_jsxRuntime.K;
exports.createElement = pluginUi_jsxRuntime._;
exports.createRef = pluginUi_jsxRuntime.b;
exports.h = pluginUi_jsxRuntime._;
exports.hydrate = pluginUi_jsxRuntime.G;
Object.defineProperty(exports, "isValidElement", {
  enumerable: true,
  get: () => pluginUi_jsxRuntime.t
});
Object.defineProperty(exports, "options", {
  enumerable: true,
  get: () => pluginUi_jsxRuntime.l
});
exports.render = pluginUi_jsxRuntime.E;
exports.toChildArray = pluginUi_jsxRuntime.H;
exports.Badge = Badge;
exports.Button = Button;
exports.useToolbar = useToolbar;
